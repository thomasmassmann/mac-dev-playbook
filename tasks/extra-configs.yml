---
- name: Check installed nvm node versions
  shell: "source ~/.nvm/nvm.sh && nvm ls"
  register: installed_node_versions
  changed_when: false
  check_mode: false

- name: Check default nvm node version
  shell: "source ~/.nvm/nvm.sh && nvm alias default "
  register: configured_node_default_version
  changed_when: false
  check_mode: false

- name: Install nvm node versions
  shell: "source ~/.nvm/nvm.sh && nvm install {{ item }}"
  when: "item|string not in installed_node_versions.stdout"
  loop: "{{ node_versions }}"

- name: Set nvm node default version
  shell: "source ~/.nvm/nvm.sh && nvm alias default {{ node_default_version }}"
  when: "node_default_version|string not in configured_node_default_version.stdout"

- name: Ensure .buildout folder exists
  file:
    path: "~/.buildout"
    state: directory
    mode: 0755

- name: Ensure buildout directories exist.
  file:
    path: "~/.buildout/{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - shared-eggs
    - downloads-cache
    - extends-cache

- name: Add buildout configuration
  template:
    src: templates/buildout-default.cfg.j2
    dest: ~/.buildout/default.cfg

- name: Check installed pyenv python versions
  shell: "pyenv versions"
  register: installed_pyenv_versions
  changed_when: false
  check_mode: false

- name: Install pyenv python versions
  shell: "pyenv install {{ item }}"
  when: "item|string not in installed_pyenv_versions.stdout"
  loop: "{{ pyenv_versions }}"

- name: Add pyenv virtualenvs
  shell: "pyenv virtualenv {{ item.python }} {{ item.name }}"
  when: "item.name|string not in installed_pyenv_versions.stdout"
  loop: "{{ pyenv_virtualenvs }}"
